/* AUTOGENERATED FILE, DO NOT EDIT
 *
 * Generated ${gen_time}
 * from: ${source_file}
 */

#include "param_table.h"
#include "param_internal.h"

/** Flash format version (part of header)
 */
const uint32_t param_format_version_be32 = ${hex(param_table.format_version_int_be32)};

/** On change callbacks:
 * @{
 */
% for k, v in sorted(param_table.parameters.iteritems()):
%     if v.onchange is not None:
//! On Change callback for param: ${k}
extern void ${v.onchange}(const struct param_entry *p);
%     endif
% endfor
/** @} */

## make global value name
<%def name="var_name(param_id, var_def)">\
% if var_def.var is None:
gp_${param_id.lower()}\
% else:
${var_def.var}\
% endif
</%def>

## translate Pt* objects to C type
<%def name="var_definition(param_id, var_def)">\
% if var_def._norm_type is bool:
bool ${var_name(param_id, var_def)}\
% elif var_def._norm_type is int:
int32_t ${var_name(param_id, var_def)}\
% elif var_def._norm_type is float:
float ${var_name(param_id, var_def)}\
% elif var_def._norm_type is str:
char ${var_name(param_id, var_def)}[PT_STRING_SIZE]\
% endif
</%def>

/** Param variables
 * @{
 */
% for k, v in sorted(param_table.parameters.iteritems()):
//! Variable for param: ${k}
extern ${var_definition(k, v)};
% endfor
/** @} */

<%def name="strbool(b)">\
% if b:
true\
% else:
false\
% endif
</%def>

<%def name="stronchange(var_def)">\
% if var_def.onchange is None:
NULL\
% else:
${var_def.onchange}\
% endif
</%def>

/* XXX TODO: Support for read-only params
 */

## translate Pt* objects to param macro
<%def name="entry_definition(param_id, var_def)">\
% if var_def._norm_type is bool:
PARAM_BOOL("${param_id}", ${var_name(param_id, var_def)}, ${strbool(var_def.default)}, ${stronchange(var_def)})\
% elif var_def._norm_type is int:
PARAM_INT32("${param_id}", ${var_name(param_id, var_def)}, ${var_def.default}, ${var_def.min}, ${var_def.max}, ${stronchange(var_def)})\
% elif var_def._norm_type is float:
PARAM_FLOAT("${param_id}", ${var_name(param_id, var_def)}, ${var_def.default}, ${var_def.min}, ${var_def.max}, ${stronchange(var_def)})\
% elif var_def._norm_type is str:
PARAM_STRING("${param_id}", ${var_name(param_id, var_def)}, "${var_def.default}", ${stronchange(var_def)})\
% endif
</%def>

<%def name="sep(loop)">\
% if not loop.last:
,\
% endif
</%def>

/** Param definition table
 */
const param_entry param_table[] = {
% for k, v in sorted(param_table.parameters.iteritems()):
	// @DESC: ${v.desc}
% if v._accept_values and v.values is not None:
	// @VALUES: ${", ".join((str(i) for i in v.values))}
% endif
% if v._accept_enum and v.enum is not None:
	// @ENUM: ${", ".join(("{}={}".format(ik, iv) for ik, iv in v.enum.iteritems()))}
% endif
% if v.read_only:
	// @READ-ONLY
% endif
	${entry_definition(k, v)}${sep(loop)}
% endfor
};

const size_t param_table_size = ARRAY_SIZE(param_table);

