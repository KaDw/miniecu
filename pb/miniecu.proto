//
// MiniECU messages defenition file
//
// vim:set ft=proto noet

package miniecu;

enum MessageId {
	STATUS = 1;
	TIME_REFERENCE = 2;
	COMMAND = 76;
	PARAM_REQUEST = 20;
	PARAM_SET = 23;
	PARAM_VALUE = 22;
	LOG_REQUEST = 117;
	LOG_ENTRY = 119;
	STATUS_TEXT = 253;
	MEMORY_DUMP_REQUEST = 250;
	MEMORY_DUMP_PAGE = 251;
};

//
//! Engine status message
// @{

message BatteryStatus {
	// Ignition battery voltage [10^-3 V]
	required uint32 voltage = 1;
	// Ignition battery consumption [10^-3 A]
	optional uint32 current = 2;
	// Calculated battery remainning [%]
	optional uint32 remaining = 3;
}

message TemperatureStatus {
	// Current engine temperature [10^-3 degC]
	required int32 engine1 = 1;
	// Second temperature sensor (if oil pressure not used)
	optional int32 engine2 = 2;
}

// TODO: check it
message FuelFlowStatus {
	required uint32 flow_ml = 1;
	optional uint32 remaining = 2;
	optional uint32 total_used_ml = 3;
}

message EngineTimerStatus {
	// Total elapsed time in seconds (I think 68 years is enougth)
	required uint32 total_elapsed = 1;
	// Current powered timer in seconds
	required uint32 current_powered = 2;
}

message CPUStatus {
	// CPU load [%]
	required uint32 load = 1;
	// Internal temperature [10^-3 degC]
	required int32 temperature = 2;
}

// Debugging ADC (hw_v2)
message ADCRawVoltages {
	required float temp = 1;
	required float oilp = 2;
	required float flow = 3;
	required float battv = 4;
	required float rtc_batt = 5;
};

message Status {
	enum Flags {
		UNKNOWN = 0;
		ACTIVE = 1;
		TIME_KNOWN = 2;
		IGNITION_ENABLED = 4;
		STARTER_ENABLED = 8;
		ENGINE_RUNNING = 16;

		ERROR = 128;
		UNDERVOLTAGE = 256;
		OVERCURRENT = 512; // not implemented in hw_v2
		OVERHEAT = 1024;
		LOW_FUEL = 2048;
		LOW_OIL_PRESSURE = 4096;
	};

	// Engine ID: 4-byte string identifying engine
	required uint32 engine_id = 1;
	// Timestamp since unix epoch in milliseconds OR millis since startup
	required uint64 timestamp_ms = 2;
	// Bit flags from Flags
	required uint32 status = 3;
	// Current RPM
	required uint32 rpm = 4;
	required BatteryStatus battery = 5;
	required TemperatureStatus temperature = 6;
	required EngineTimerStatus time = 7;
	required CPUStatus cpu = 8;
	// Current OIL pressure [TODO]
	optional int32 oil_pressure = 9;
	optional FuelFlowStatus fuel = 10;
	optional ADCRawVoltages adc_raw = 11;
}

// @}

//
//! System commands
// @{

message Command {
	enum Operation {
		UNKNOWN = 0;
		EMERGENCY_STOP = 1;
		IGNITION_ENABLE = 2;
		IGNITION_DISABLE = 3;
		STARTER_ENABLE = 4;
		STARTER_DISABLE = 5;

		// start engine startup script
		DO_ENGINE_START = 10;
		STOP_ENGINE_START = 11;

		// send after refueling
		REFUEL_DONE = 20;

		// config operations
		SAVE_CONFIG = 30;
		LOAD_CONFIG = 31;

		// some magic commands
		DO_ERASE_CONFIG = 13373550;
		DO_ERASE_LOG = 13373109;
		DO_REBOOT = 1337438007;
	};

	enum Response {
		NACK = 0;
		ACK = 1;
		IN_PROGRESS = 2;
	};

	required uint32 engine_id = 1;
	required Operation operation = 2;
	optional Response response = 3;
}

// Set ECU RTC time
message TimeReference {
	required uint32 engine_id = 1;
	required uint64 timestamp_ms = 2;
	optional uint32 system_time = 3;
	optional int32 timediff = 4;
}

// @}

//
//! Parameter transfer
//  inspired by MAVLink parameter protocol
// @{

// common type for value union
message ParamType {
	optional bool u_bool = 1;
	optional int32 u_int32 = 2;
	optional float u_float = 3;
	optional string u_string = 4;
}

// if param_id is not set: request list
message ParamRequest {
	required uint32 engine_id = 1;
	optional string param_id = 2;
}

message ParamSet {
	required uint32 engine_id = 1;
	required string param_id = 2;
	required ParamType value = 3;
}

message ParamValue {
	required uint32 engine_id = 1;
	required string param_id = 2;
	required uint32 param_index = 3;
	required uint32 param_count = 4;
	required ParamType value = 5;
}

// @}

//
//! Log manipulation
// @{

message LogRequest {
	required uint32 engine_id = 1;
	optional uint32 offset = 2;
}

// Log entry message: used for communication
// and storing on flash.
message LogEntry {
	required uint32 engine_id = 1;
	required uint32 id = 2;
	required uint64 timestamp_ms = 3;
	required uint32 status = 4;
	required uint32 engine_powered_time = 5;
	required uint32 batt_voltage = 6;
	required int32 batt_remaining = 7;
	required int32 temp_engine = 8;
	required int32 temp_internal = 9;
	required int32 fuel_remaining_ml = 10;
}

// @}

//
//! Additional messages
// @{

// Status text message (debug print)
message StatusText {
	enum Severity {
		DEBUG = 0;
		INFO = 1;
		WARN = 2;
		ERROR = 3;
		FAILURE = 4;
	};

	required uint32 engine_id = 1;
	required Severity severity = 2;
	required string text = 3;
}

// Request mem dump
message MemoryDumpRequest {
	enum Type {
		RAM = 0;
		FLASH = 1;
	};

	required uint32 engine_id = 1;
	required Type type = 2;
	required uint32 stream_id = 3;
	required uint32 address = 4;
	required uint32 size = 5;
};

// Ansver to MemoryDumpRequest
message MemoryDumpPage {
	required uint32 engine_id = 1;
	required uint32 stream_id = 2;
	required uint32 address = 3;
	required bytes page = 4;
};

// @}
